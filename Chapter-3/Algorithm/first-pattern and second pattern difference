the input T = "abababc" and p = "abc".

First Pattern Matching (Naive Approach)
In the naive pattern matching algorithm, we check each possible starting position in the text T and attempt to match the pattern p character by character. 
If a mismatch is found at any character, we move the starting position by one and try again until we either find a match or exhaust the text.

Steps:
Loop through each possible starting position i in the text T from 0 to T.length() - p.length().
For each starting position i, compare the substring T[i...i + p.length() - 1] with the pattern p.
If the substring matches p, report the starting index i.
If no match is found, continue searching by moving i forward by one.
Example:
For T = "abababc" and p = "abc", the algorithm will:

Compare T[0...2] = "aba" with p = "abc" (mismatch).
Compare T[1...3] = "bab" with p = "abc" (mismatch).
Compare T[2...4] = "aba" with p = "abc" (mismatch).
Compare T[3...5] = "bab" with p = "abc" (mismatch).
Compare T[4...6] = "abc" with p = "abc" (match).
The match is found at index 4.

Second Pattern Matching (Substring Comparison)
In the substring comparison approach, instead of iterating character by character, we directly extract substrings of length p.length() from the text T and compare them to the pattern p.

Steps:
Loop through the text T from index 0 to T.length() - p.length().
For each index i, extract a substring T.substr(i, p.length()).
Compare the extracted substring with the pattern p.
If the substring equals p, report the starting index i.
Example:
For T = "abababc" and p = "abc", the algorithm will:

Extract T.substr(0, 3) = "aba" and compare it with p = "abc" (mismatch).
Extract T.substr(1, 3) = "bab" and compare it with p = "abc" (mismatch).
Extract T.substr(2, 3) = "aba" and compare it with p = "abc" (mismatch).
Extract T.substr(3, 3) = "bab" and compare it with p = "abc" (mismatch).
Extract T.substr(4, 3) = "abc" and compare it with p = "abc" (match).
The match is found at index 4.

Summary:
First Pattern Matching (Naive Approach): Character by character comparison, checking each possible starting position.
Second Pattern Matching (Substring Comparison): Direct extraction and comparison of substrings of the same length as the pattern.
